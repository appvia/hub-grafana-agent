/*
 * hub-grafana-agent
 *
 * an agent used to provision and configure Grafana resources
 *
 * API version: v1beta
 * Contact: support@appvia.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"io"
	"io/ioutil"
	"net/http"
	"text/template"

	"github.com/gorilla/mux"
	logrus "github.com/sirupsen/logrus"
)

const dashboardPrefix string = "hub-grafana-"

func handleSuccess(w http.ResponseWriter, payload []byte) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(payload)
}

func handleDelete(w http.ResponseWriter) {
	w.WriteHeader(http.StatusNoContent)
}

func handleInternalServerError(w http.ResponseWriter, reason string, detail string) {
	var apiError ApiError
	apiError = ApiError{Reason: reason, Detail: detail}
	payload, err := json.Marshal(apiError)
	_ = err
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusInternalServerError)
	w.Write(payload)
}

func handleBadRequest(w http.ResponseWriter, detail string) {
	var apiError ApiError
	apiError = ApiError{Reason: "bad request", Detail: detail}
	payload, err := json.Marshal(apiError)
	_ = err
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusBadRequest)
	w.Write(payload)
}

func handleNotFoundError(w http.ResponseWriter, detail string) {
	var apiError ApiError
	apiError = ApiError{Reason: "not found", Detail: detail}
	payload, err := json.Marshal(apiError)
	_ = err
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusNotFound)
	w.Write(payload)
}

func callGrafana(url string, apiKey string, verb string, payload io.Reader) (int, []byte, error) {
	var statusCode int
	var body []byte
	var err error
	req, err := http.NewRequest(verb, url, payload)
	req.Header.Set("Authorization", "Bearer"+" "+apiKey)
	client := &http.Client{}
	resp, err := client.Do(req)
	defer resp.Body.Close()
	if err != nil {
		logrus.Println("Error calling Grafana:", verb, url, err)
	} else {
		body, _ = ioutil.ReadAll(resp.Body)
		statusCode = resp.StatusCode
		logrus.Printf("Response body from Grafana: %s", string(body))
		logrus.Printf("Response code from Grafana: %v", statusCode)
	}
	return statusCode, body, err
}

func getTemplateFromUrl(template_url string) ([]byte, error) {
	var templateBody []byte
	var err error
	templateReq, err := http.NewRequest("GET", template_url, nil)
	templateReq.Header.Set("Accept", "application/json,text/plain")
	client := &http.Client{}
	templateResp, err := client.Do(templateReq)
	if err != nil {
		logrus.Println("Error fetching Grafana dashboard json from URL:", template_url)
		return templateBody, err
	}
	defer templateResp.Body.Close()
	templateBody, _ = ioutil.ReadAll(templateResp.Body)
	logrus.Println("Template response body:", string(templateBody))
	return templateBody, nil
}

func DashboardNamespaceDelete(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	namespace := vars["namespace"]

	decodedCert, err := base64.StdEncoding.DecodeString(r.Header.Get("X-Grafana-CA"))
	if err != nil {
		logrus.Println("decode error:", err)
	}
	_ = decodedCert
	grafanaUrl := r.Header.Get("X-Grafana-Url")
	grafanaApiKey := r.Header.Get("X-Grafana-API-Key")

	if err != nil {
		logrus.Println("decode error:", err)
	}

	getReq, err := http.NewRequest("GET", grafanaUrl+"/api/search?tag="+dashboardPrefix+namespace, nil)
	getReq.Header.Set("Authorization", "Bearer"+" "+grafanaApiKey)

	client := &http.Client{}
	getResp, err := client.Do(getReq)
	if err != nil {
		panic(err)
	}
	defer getResp.Body.Close()

	body, _ := ioutil.ReadAll(getResp.Body)
	logrus.Println("Grafana response body:", string(body))

	type GrafanaDashboard struct {
		Uid string `json:"uid"`
		Id  int64  `json:"id"`
		Url string `json:"url"`
	}
	var g []GrafanaDashboard

	if err := json.Unmarshal(body, &g); err != nil {
		panic(err)
	}
	if len(g) == 0 {
		logrus.Println("Dashboard already deleted!")
		w.WriteHeader(204)
		return
	} else if len(g) > 1 {
		handleInternalServerError(w, "internal server error", "more than two dashboards matched query")
		return
	} else if len(g) == 1 {
		logrus.Println("Dashboard found")
	}

	dash := g[0]
	var uid string = dash.Uid

	logrus.Printf("Attempting to delete dashboard with uid %s", string(uid))

	status, body, err := callGrafana(grafanaUrl+"/api/dashboards/uid/"+uid, grafanaApiKey, "DELETE", nil)
	if err != nil {
		handleInternalServerError(w, "internal server error", "error deleting dashboard from Grafana")
		return
	}

	if status == 200 {
		logrus.Println("Dashboard deleted!")
		w.WriteHeader(204)
		return
	} else {
		handleInternalServerError(w, "internal server error", "error deleting dashboard from Grafana")
		return
	}
}

func DashboardNamespaceGet(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	namespace := vars["namespace"]

	decodedCert, err := base64.StdEncoding.DecodeString(r.Header.Get("X-Grafana-CA"))
	if err != nil {
		logrus.Println("decode error:", err)
	}
	_ = decodedCert
	grafanaUrl := r.Header.Get("X-Grafana-Url")
	grafanaApiKey := r.Header.Get("X-Grafana-API-Key")

	status, body, err := callGrafana(grafanaUrl+"/api/search?tag="+dashboardPrefix+namespace, grafanaApiKey, "GET", nil)

	if err != nil || status != 200 {
		handleInternalServerError(w, "internal server error", "error calling Grafana")
		return
	}

	type GrafanaDashboard struct {
		Uid string `json:"uid"`
		Id  int64  `json:"id"`
		Url string `json:"url"`
	}
	var g []GrafanaDashboard

	if err := json.Unmarshal(body, &g); err != nil {
		panic(err)
	}
	if len(g) == 0 {
		handleNotFoundError(w, "dashboard not found")
		return
	} else if len(g) > 1 {
		handleInternalServerError(w, "internal server error", "more than two dashboards matched query")
		return
	}
	dash := g[0]

	var url string = grafanaUrl + dash.Url
	var id int64 = dash.Id
	var uid string = dash.Uid

	var dashboard Dashboard
	dashboard = Dashboard{Namespace: namespace, Url: url, Id: id, Uid: uid}

	payload, err := json.Marshal(dashboard)

	if err != nil {
		logrus.Println(err)
	}

	handleSuccess(w, payload)
	return
}

func DashboardNamespacePut(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	namespace := vars["namespace"]

	decodedCert, err := base64.StdEncoding.DecodeString(r.Header.Get("X-Grafana-CA"))
	if err != nil {
		logrus.Println("decode error:", err)
	}
	_ = decodedCert
	grafanaUrl := r.Header.Get("X-Grafana-Url")
	grafanaApiKey := r.Header.Get("X-Grafana-API-Key")
	reqBody, err := ioutil.ReadAll(r.Body)

	if len(reqBody) > 0 {
		var t TemplateUrl
		err = json.Unmarshal(reqBody, &t)
		if err != nil || t.Url == "" {
			logrus.Println("Malformed request body:", string(reqBody))
			handleBadRequest(w, "request body malformed")
			return
		}
		template_url := t.Url
		logrus.Println("PUT request for namespace:", namespace, "template_url:", template_url)
		template, err := getTemplateFromUrl(template_url)
		logrus.Println("Template body:", string(template))
		if err != nil {
			handleInternalServerError(w, "internal server error", "error fetching template from template_url")
			return
		}
	}

	type Variables struct {
		Namespace string
	}

	templateVars := Variables{namespace}
	var payload bytes.Buffer

	tmpl := template.Must(template.ParseFiles("dashboards/kubernetes-prometheus.json.tmpl"))
	err = tmpl.Execute(&payload, templateVars)
	tmpl.Execute(&payload, templateVars)

	var reader io.Reader
	reader = &payload
	logrus.Printf("Attempting to create dashboard for namespace %s in grafana", namespace)

	status, body, err := callGrafana(grafanaUrl+"/api/dashboards/db", grafanaApiKey, "GET", reader)

	if status != 200 {
		handleInternalServerError(w, "internal server error", "more than two dashboards matched query")
		return
	}

	type GrafanaResponse struct {
		Status string `json:"status"`
		Id     int64  `json:"id,omitempty"`
		Uid    string `json:"uid,omitempty"`
		Url    string `json:"url,omitempty"`
	}

	var m GrafanaResponse
	if err := json.Unmarshal(body, &m); err != nil {
		panic(err)
	}
	if m.Status == "success" {
		responsePayload := Dashboard{Namespace: namespace, Id: m.Id, Uid: m.Uid, Url: grafanaUrl + m.Url}
		marshalPayload, err := json.Marshal(responsePayload)
		if err != nil {
			logrus.Println(err)
		}
		handleSuccess(w, marshalPayload)
	}
	if m.Status == "name-exists" {
		// TODO: update dashboard in thise case
		logrus.Printf("Dashboard already exists")
		handleSuccess(w, []byte(`{"message":"dashboard already exists"}`))
		return
	}
}
