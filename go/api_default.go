/*
 * hub-grafana-agent
 *
 * an agent used to provision and configure Grafana resources
 *
 * API version: v1beta
 * Contact: support@appvia.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/base64"
	"encoding/json"
	"net/http"

	"github.com/gorilla/mux"
	logrus "github.com/sirupsen/logrus"
)

func handleSuccess(w http.ResponseWriter, payload []byte) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(payload)
}

func handleDelete(w http.ResponseWriter) {
	w.WriteHeader(http.StatusNoContent)
}

func handleInternalServerError(w http.ResponseWriter, reason string, err error) {
	logrus.Println(err.Error())
	var apiError ApiError
	apiError = ApiError{Reason: reason, Detail: err.Error()}
	payload, err := json.Marshal(apiError)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusInternalServerError)
	w.Write(payload)
}

func handleNotFoundError(w http.ResponseWriter, err error) {
	logrus.Println(err.Error())
	var apiError ApiError
	apiError = ApiError{Reason: "not found", Detail: err.Error()}
	payload, err := json.Marshal(apiError)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusNotFound)
	w.Write(payload)
}

func DashboardNamespaceDelete(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	namespace := vars["namespace"]
	_ = namespace

	decodedCert, err := base64.StdEncoding.DecodeString(r.Header.Get("X-Grafana-CA"))
	_ = decodedCert

	if err != nil {
		logrus.Println("decode error:", err)
		return
	}

	// Search for dashboard using tag
	// GET <grafana-url>/api/search?tag=hub-grafana-<namespace>
	// Delete dashboard using uid
	// DELETE <grafana-url>/api/dashboards/uid/hub-grafana-<namespace>
}

func DashboardNamespaceGet(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	namespace := vars["namespace"]

	decodedCert, err := base64.StdEncoding.DecodeString(r.Header.Get("X-Grafana-CA"))
	_ = decodedCert

	if err != nil {
		logrus.Println("decode error:", err)
		return
	}

	// Search for dashboard using tag
	// GET <grafana-url>/api/search?tag=hub-grafana-<namespace>
	// Return URL
	var url string
	var dashboard Dashboard
	dashboard = Dashboard{Namespace: namespace, Url: url}
	payload, err := json.Marshal(dashboard)

	if err != nil {
		logrus.Println(err)
	}
	handleSuccess(w, payload)
	return
}

func DashboardNamespacePut(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	namespace := vars["namespace"]

	decodedCert, err := base64.StdEncoding.DecodeString(r.Header.Get("X-Grafana-CA"))
	_ = decodedCert

	if err != nil {
		logrus.Println("decode error:", err)
		return
	}

	// Read dashboard template json from file
	// Render in namespace and a unique tag hub-grafana-<namespace>
	// POST to <grafana-url>/api/dashboards/db

	var url string
	var dashboard Dashboard
	dashboard = Dashboard{Namespace: namespace, Url: url}
	payload, err := json.Marshal(dashboard)

	if err != nil {
		logrus.Println(err)
	}
	handleSuccess(w, payload)
	return
}
