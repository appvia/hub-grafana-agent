/*
 * hub-grafana-agent
 *
 * an agent used to provision and configure Grafana resources
 *
 * API version: v1beta
 * Contact: support@appvia.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/base64"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"os"
	"text/template"

	"github.com/gorilla/mux"
	logrus "github.com/sirupsen/logrus"
)

func handleSuccess(w http.ResponseWriter, payload []byte) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(payload)
}

func handleDelete(w http.ResponseWriter) {
	w.WriteHeader(http.StatusNoContent)
}

func handleInternalServerError(w http.ResponseWriter, reason string, detail string) {
	var apiError ApiError
	apiError = ApiError{Reason: reason, Detail: detail}
	payload, err := json.Marshal(apiError)
	_ = err
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusInternalServerError)
	w.Write(payload)
}

func handleNotFoundError(w http.ResponseWriter, detail string) {
	var apiError ApiError
	apiError = ApiError{Reason: "not found", Detail: detail}
	payload, err := json.Marshal(apiError)
	_ = err
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusNotFound)
	w.Write(payload)
}

func DashboardNamespaceDelete(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	namespace := vars["namespace"]
	_ = namespace

	decodedCert, err := base64.StdEncoding.DecodeString(r.Header.Get("X-Grafana-CA"))
	_ = decodedCert

	if err != nil {
		logrus.Println("decode error:", err)
	}

	// Search for dashboard using tag
	// GET <grafana-url>/api/search?tag=hub-grafana-<namespace>
	// Delete dashboard using uid
	// DELETE <grafana-url>/api/dashboards/uid/hub-grafana-<namespace>
}

func DashboardNamespaceGet(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	namespace := vars["namespace"]

	decodedCert, err := base64.StdEncoding.DecodeString(r.Header.Get("X-Grafana-CA"))
	_ = decodedCert
	grafanaApiUrl := r.Header.Get("X-Grafana-API-Url")
	grafanaApiKey := r.Header.Get("X-Grafana-API-Key")

	if err != nil {
		logrus.Println("decode error:", err)
	}

	req, err := http.NewRequest("GET", grafanaApiUrl+"/api/search?tag=hub-grafana-"+namespace, nil)
	req.Header.Set("Authorization", "Bearer"+" "+grafanaApiKey)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	logrus.Println("Grafana response body:", string(body))

	type GrafanaDashboard struct {
		Id  int64  `json:"id"`
		Url string `json:"url"`
	}
	var g []GrafanaDashboard

	if err := json.Unmarshal(body, &g); err != nil {
		panic(err)
	}
	if len(g) == 0 {
		handleNotFoundError(w, "dashboard not found")
		return
	} else if len(g) > 1 {
		handleInternalServerError(w, "internal server error", "more than two dashboards matched query")
		return
	}
	dash := g[0]

	var url string = dash.Url
	var id int64 = dash.Id

	var dashboard Dashboard
	dashboard = Dashboard{Namespace: namespace, Url: url, Id: id}
	payload, err := json.Marshal(dashboard)
	if err != nil {
		logrus.Println(err)
	}
	handleSuccess(w, payload)
	return
}

func DashboardNamespacePut(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	namespace := vars["namespace"]

	decodedCert, err := base64.StdEncoding.DecodeString(r.Header.Get("X-Grafana-CA"))
	_ = decodedCert

	if err != nil {
		logrus.Println("decode error:", err)
	}

	type Variables struct {
		Namespace string
	}

	templateVars := Variables{namespace}
	tmpl := template.Must(template.ParseFiles("dashboards/kubernetes-prometheus.json.tmpl"))
	tmpl.Execute(os.Stdout, templateVars)
}
